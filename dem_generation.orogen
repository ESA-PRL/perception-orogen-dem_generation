name "dem_generation"
# Optionally declare the version number
# version "0.1"

import_types_from "dem_generationTypes.hpp"


using_library "dem_generation"
using_library "pcl_common-1.7"
using_library "frame_helper"
#using_library "opencv"


import_types_from "base"
import_types_from "frame_helper/Calibration.h"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the dem_generation namespace.
task_context "Task" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    # Configuration property
    # in the C++ code with # _config_value.get() and _config_value.set(new_value).
    property "camera_name", "/std/string"
    property "save_directory", "/std/string"
    property "cameraCalibration", "/frame_helper/CameraCalibration"

	# Input ports
    # Data can be retrieved using _input.read(value), which returns true if data
    # was available, and false otherwise. _input.connected() returns if this
    # input is connected to an output or not.
        
    # The component works from distance frame. If a pointcloud is given, it can work directly from there 
	input_port("distance_frame", "/base/samples/DistanceImage").
	doc "distance image for the left camera"
	input_port('pointcloud', 'base::samples::Pointcloud').
	doc ('The pointcloud of the scan')

	input_port('left_frame_rect', ro_ptr('base::samples::frame::Frame')).
	doc 'Rectified Left camera frame of PanCam.'
	input_port('right_frame_rect', ro_ptr('base::samples::frame::Frame')).
	doc 'Rectified Right camera frame of PanCam.'

    # Output ports
    # Data can be written using _output.write(value). _output.connected() returns
    # if this output is connected to an input or not.
    output_port "image_left_path", "/std/string"
    output_port "image_right_path", "/std/string"
    output_port "distance_frame_path", "/std/string"
    output_port "mesh_path", "/std/string"

	# Driving
    port_driven 'distance_frame', 'pointcloud'
end

